{"version":3,"sources":["serviceWorker.js","components/app/install.js","index.js"],"names":["Boolean","window","location","hostname","match","FILES_TO_CACHE","addEventListener","evt","console","log","waitUntil","caches","open","then","cache","addAll","skipWaiting","keys","keyList","Promise","all","map","key","delete","clients","claim","request","url","mode","Install","deferredPrompt","banner","document","querySelector","e","preventDefault","undefined","prompt","userChoice","result","outcome","id","Component","App","exact","path","render","component","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAwHN,IAEMC,EAAiB,CACrB,kCACA,8BACA,8BACA,8BACA,gCAGFJ,OAAOK,iBAAiB,WAAW,SAACC,GAClCC,QAAQC,IAAI,2BAEZF,EAAIG,UACFC,OAAOC,KAde,mBAcSC,MAAK,SAACC,GAEnC,OADAN,QAAQC,IAAI,4CACLK,EAAMC,OAAOV,OAGxBJ,OAAOe,iBAITf,OAAOK,iBAAiB,YAAY,SAACC,GACnCC,QAAQC,IAAI,4BAEZF,EAAIG,UACFC,OAAOM,OAAOJ,MAAK,SAACK,GAClB,OAAOC,QAAQC,IAAIF,EAAQG,KAAI,SAACC,GAC9B,GA7BkB,oBA6BdA,EAEF,OADAd,QAAQC,IAAI,qCAAsCa,GAC3CX,OAAOY,OAAOD,WAK7BrB,OAAOuB,QAAQC,WAGjBxB,OAAOK,iBAAiB,SAAS,SAACC,GAChCC,QAAQC,IAAI,wBAAyBF,EAAImB,QAAQC,KAE7CpB,EAAImB,QAAQE,Q,UCjLGC,E,kLAGb,IAAIC,EACAC,EAASC,SAASC,cAAc,WAEpChC,OAAOK,iBAAiB,uBAAuB,SAAC4B,GAI5C,OAHAA,EAAEC,iBACF3B,QAAQC,IAAI,kCACZqB,EAAiBI,GACV,KAGXH,EAAOzB,iBAAiB,SAAS,gBACR8B,IAAnBN,IACFA,EAAeO,SACfP,EAAeQ,WAAWzB,MAAK,SAAC0B,GACR,aAAlBA,EAAOC,QACThC,QAAQC,IAAI,aAIZD,QAAQC,IAAI,uBAEdqB,EAAiB,c,+BASvB,OACQ,6BACI,6BACI,4BAAQW,GAAG,UAAX,4G,GApCaC,a,4CCOhBC,E,uKAEb,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAC1B,4DAIJ,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,OAAOE,UAAWlB,S,GATnBa,aAgBjCM,IAASF,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEFd,SAASiB,eAAe,SFqGxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.f5f2893d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // localhost/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  // TODO: correct this condition\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\nconst STATIC_CACHE_NAME = 'static-cache-v1'\n\nconst FILES_TO_CACHE = [\n  './src/static/css/normalizer.css',\n  './src/static/font/Yekan.eot',\n  './src/static/font/Yekan.ttf',\n  './src/static/font/Yekan.eot',\n  './src/static/font/Yekan.woff',\n]\n\nwindow.addEventListener('install', (evt) => {\n  console.log('[ServiceWorker] Install');\n  // CODELAB: Precache static resources here.\n  evt.waitUntil(\n    caches.open(STATIC_CACHE_NAME).then((cache) => {\n      console.log('[ServiceWorker] Pre-caching offline page');\n      return cache.addAll(FILES_TO_CACHE);\n    })\n  );  \n  window.skipWaiting();\n});\n\n\nwindow.addEventListener('activate', (evt) => {\n  console.log('[ServiceWorker] Activate');\n  // CODELAB: Remove previous cached data from disk.\n  evt.waitUntil(\n    caches.keys().then((keyList) => {\n      return Promise.all(keyList.map((key) => {\n        if (key !== STATIC_CACHE_NAME) {\n          console.log('[ServiceWorker] Removing old cache', key);\n          return caches.delete(key);\n        }\n      }));\n    })\n  );\n  window.clients.claim();\n});\n\nwindow.addEventListener('fetch', (evt) => {\n  console.log('[ServiceWorker] Fetch', evt.request.url);\n  // CODELAB: Add fetch event handler here.\n  if (evt.request.mode !== 'navigate') {\n    // Not a page navigation, bail.\n    return;\n  }\n})","import React, {Component} from 'react'\n\n\nexport default class Install extends Component {\n\n    componentDidMount() {\n        let deferredPrompt;   \n        var banner = document.querySelector('#banner');\n    \n        window.addEventListener('beforeinstallprompt', (e) => {\n            e.preventDefault();\n            console.log('beforeinstallprompt fired! ^_^');\n            deferredPrompt = e;\n            return false;\n        })\n    \n        banner.addEventListener('click', () => {\n          if (deferredPrompt !== undefined) {\n            deferredPrompt.prompt();\n            deferredPrompt.userChoice.then((result) => {\n              if (result.outcome == 'dismissed') {\n                console.log('cancelled');\n              }\n    \n              else {\n                console.log('added to homescreen');\n              }\n              deferredPrompt = null;\n            })\n    \n          }\n        })\n    \n      }\n\n    render() {\n        return (\n                <div>\n                    <div>\n                        <button id=\"banner\">\n                            نصب اپلیکیشن پربار\n                        </button>\n\n                    </div>\n                </div>\n        )\n    }\n\n\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport './static/css/normalizer.css'\n\nimport Install from './components/app/install'\n\nexport default class App extends Component {\n    render() {\n        return (\n            <Switch>\n                <Route exact path=\"/\" render={() => (\n                    <div>\n                        سلام\n                    </div>\n                )}/>\n                <Route exact path=\"/app\" component={Install}/>\n            </Switch>\n        )\n    }\n}\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}